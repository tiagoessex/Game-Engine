/*
	VenatorUtils

	collections of general functions, without any direct relation with any system:

	conversions:
			template <class T>
			string Number2String(T n);

			template <class T>
			T String2Number(const std::string& s)

			void String2Vector(const std::string& str, Scalar v[]);
			std::string Vec32String(const Vec3& vector);
			std::string Quat2String(const Quat& quat);
			Vec3 String2Vec3(const std::string& str);
			Quat String2Quat(const std::string& str)

	identificators:
			int isBigIndian(void);


	genewrators:
		std::string generateName(void)


	splitters:
			void split(std::vector<int>& tokens, const std::string& str, const std::string& delimiters = " ");
	
	
	...

*/


#ifndef _VenatorUtils_h_
#define _VenatorUtils_h_

// c/c++ headers
#include <string>
#include <sstream>
#include <vector>

#include "../Prerequisites.h"

namespace Venator {
	namespace Utils {


	/**
		convert a number to string
		@param
			n	number to be converted
		@return
				returns the string representation of n

		@example:
				int a = 10;
				float b = 100.02;
				Scalar c = 2.123456789e5;
				Number2String(a);
				Number2String(b);
				Number2String(c);
    

	*/
	template <class T>
	std::string Number2String(T n)	{
		std::stringstream ss;
		ss << n;
		return  ss.str();
	}
	/*
	template<typename T>
	static std::string ToString(const T& t)
	{
		std::stringstream temp;
		temp << t;
		return temp.str();
	}
	*/

	template <class T>
	T String2Number(const std::string& s) {
		T temp;
		std::istringstream convert(s);
		if ( !(convert >> temp) )
			temp = -1; // fail?
		return temp;
	}


	/**
		identifies the underlying architecture
		@return
			returns 0 if little indian
					1 if big indian
	*/
	int isBigIndian(void);


	/**
		splits a string of numbers by the delimiter
		used to read level map files
		@params
			[tokens] int elements from the splitted string
			[str] string containing the numbers
			[delimiters] char or string where the string will be seccionaed

			ex: str = "1 2 3 4 5"
				tokens => 1,2,3,4,5

	*/
	void split(std::vector<Scalar>& tokens, const std::string& str, const std::string& delimiters = " ");


	/**
		parses a string formed by reals separeted by comma and retrieves an array 
		with those reals

		ex:
			std::string str1 ="100.87,50.5,60.7";
			Scalar v[3];
			String2Vector(str1,v);        
	*/
	void String2Vector(const std::string& str, Scalar v[]);

	Vec3 String2Vec3(const std::string& str);

	Quat String2Quat(const std::string& str);

	/**
		returns a string from by Vec3

		ex:
			Vec3 v(100.87,50.5,60.0);			
			getStringFromVector(v); // "100.87,50.5,60.0"			       
	*/
	std::string Vec32String(const Vec3& vector);

	std::string Quat2String(const Quat& quat);

	/**
		returns an autogenerated name pre by a string
	*/
	std::string generateName(void);


	}	// namespace utils

}	// namespace venator

#endif
